// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Remneva/otus_hw/hw12_13_14_15_calendar/internal/storage/sql (interfaces: BaseStorage)

// Package sqlstorage is a generated GoMock package.
package memorystorage

import (
	context "context"
	reflect "reflect"

	sql "github.com/Remneva/otus_hw/hw12_13_14_15_calendar/internal/storage/sql"
	gomock "github.com/golang/mock/gomock"
	zap "go.uber.org/zap"
)

// MockBaseStorage is a mock of BaseStorage interface.
type MockBaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBaseStorageMockRecorder
}

// MockBaseStorageMockRecorder is the mock recorder for MockBaseStorage.
type MockBaseStorageMockRecorder struct {
	mock *MockBaseStorage
}

// NewMockBaseStorage creates a new mock instance.
func NewMockBaseStorage(ctrl *gomock.Controller) *MockBaseStorage {
	mock := &MockBaseStorage{ctrl: ctrl}
	mock.recorder = &MockBaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseStorage) EXPECT() *MockBaseStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBaseStorage) Close(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBaseStorageMockRecorder) Close(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBaseStorage)(nil).Close), arg0)
}

// Connect mocks base method.
func (m *MockBaseStorage) Connect(arg0 context.Context, arg1 string, arg2 *zap.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *MockBaseStorageMockRecorder) Connect(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockBaseStorage)(nil).Connect), arg0, arg1, arg2)
}

// DeleteEvent mocks base method.
func (m *MockBaseStorage) DeleteEvent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockBaseStorageMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockBaseStorage)(nil).DeleteEvent), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockBaseStorage) GetEvent(arg0 context.Context, arg1 int64) (sql.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(sql.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockBaseStorageMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockBaseStorage)(nil).GetEvent), arg0, arg1)
}

// GetEvents mocks base method.
func (m *MockBaseStorage) GetEvents(arg0 context.Context) ([]sql.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0)
	ret0, _ := ret[0].([]sql.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockBaseStorageMockRecorder) GetEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockBaseStorage)(nil).GetEvents), arg0)
}

// GetLastId mocks base method.
func (m *MockBaseStorage) GetLastId(arg0 context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastId", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastId indicates an expected call of GetLastId.
func (mr *MockBaseStorageMockRecorder) GetLastId(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastId", reflect.TypeOf((*MockBaseStorage)(nil).GetLastId), arg0)
}

// Insert mocks base method.
func (m *MockBaseStorage) Insert(arg0 context.Context, arg1 sql.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockBaseStorageMockRecorder) Insert(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBaseStorage)(nil).Insert), arg0, arg1)
}

// SetEvent mocks base method.
func (m *MockBaseStorage) AddEvent(arg0 context.Context, arg1 sql.Event) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetEvent indicates an expected call of SetEvent.
func (mr *MockBaseStorageMockRecorder) SetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockBaseStorage)(nil).AddEvent), arg0, arg1)
}

// UpdateEvent mocks base method.
func (m *MockBaseStorage) UpdateEvent(arg0 context.Context, arg1 sql.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockBaseStorageMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockBaseStorage)(nil).UpdateEvent), arg0, arg1)
}
