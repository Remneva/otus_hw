// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Remneva/otus_hw/hw12_13_14_15_calendar/internal/storage (interfaces: EventsStorage)

// Package storage is a generated GoMock package.
package internalgrpc

import (
	context "context"
	reflect "reflect"

	storage "github.com/Remneva/otus_hw/hw12_13_14_15_calendar/internal/storage"
	gomock "github.com/golang/mock/gomock"
)

// MockEventsStorage is a mock of EventsStorage interface.
type MockEventsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEventsStorageMockRecorder
}

// MockEventsStorageMockRecorder is the mock recorder for MockEventsStorage.
type MockEventsStorageMockRecorder struct {
	mock *MockEventsStorage
}

// NewMockEventsStorage creates a new mock instance.
func NewMockEventsStorage(ctrl *gomock.Controller) *MockEventsStorage {
	mock := &MockEventsStorage{ctrl: ctrl}
	mock.recorder = &MockEventsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventsStorage) EXPECT() *MockEventsStorageMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockEventsStorage) AddEvent(arg0 context.Context, arg1 storage.Event) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEvent", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockEventsStorageMockRecorder) AddEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockEventsStorage)(nil).AddEvent), arg0, arg1)
}

// DeleteEvent mocks base method.
func (m *MockEventsStorage) DeleteEvent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockEventsStorageMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockEventsStorage)(nil).DeleteEvent), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockEventsStorage) GetEvent(arg0 context.Context, arg1 int64) (storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockEventsStorageMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockEventsStorage)(nil).GetEvent), arg0, arg1)
}

// GetEvents mocks base method.
func (m *MockEventsStorage) GetEvents(arg0 context.Context) ([]storage.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents", arg0)
	ret0, _ := ret[0].([]storage.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockEventsStorageMockRecorder) GetEvents(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockEventsStorage)(nil).GetEvents), arg0)
}

// UpdateEvent mocks base method.
func (m *MockEventsStorage) UpdateEvent(arg0 context.Context, arg1 storage.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockEventsStorageMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockEventsStorage)(nil).UpdateEvent), arg0, arg1)
}
